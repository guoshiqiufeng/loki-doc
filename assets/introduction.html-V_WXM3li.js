import{_ as t,o as e,c as d,d as i}from"./app-C7opU1tZ.js";const n={},l=i('<h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>loki拦截器支持两种类型：发送拦截、监听拦截</li><li>支持自定义过滤</li><li>可以自定义实现自己的统一业务处理如：消息发送加密、消息接收解密</li></ul><blockquote><p>使用spring扫描实例, 实现<code>PipelineProcess</code>接口</p></blockquote><h2 id="pipelineprocess-接口" tabindex="-1"><a class="header-anchor" href="#pipelineprocess-接口"><span>PipelineProcess 接口</span></a></h2><table><thead><tr><th>方法名称</th><th>请求参数类型</th><th>返回参数类型</th><th>备注</th></tr></thead><tbody><tr><td>support</td><td>PipelineContext</td><td>boolean</td><td>用户判断当前过滤器是否生效，返回true 支持 false 不支持</td></tr><tr><td>order</td><td>-</td><td>Long</td><td>获取排序，越小越靠前</td></tr><tr><td>process</td><td>PipelineContext</td><td>-</td><td>过滤器处理逻辑</td></tr></tbody></table><h2 id="pipelinecontext" tabindex="-1"><a class="header-anchor" href="#pipelinecontext"><span>PipelineContext</span></a></h2><table><thead><tr><th>参数名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>needBreak</td><td>boolean</td><td>是否终止过滤器整个链路</td></tr><tr><td>code</td><td>String</td><td>类型编码</td></tr><tr><td>model</td><td>泛型</td><td>拦截内容</td></tr></tbody></table>',7),o=[l];function r(a,c){return e(),d("div",null,o)}const p=t(n,[["render",r],["__file","introduction.html.vue"]]),h=JSON.parse('{"path":"/guide/interceptor/introduction.html","title":"介绍","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"介绍","description":null},"headers":[{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"PipelineProcess 接口","slug":"pipelineprocess-接口","link":"#pipelineprocess-接口","children":[]},{"level":2,"title":"PipelineContext","slug":"pipelinecontext","link":"#pipelinecontext","children":[]}],"git":{"updatedTime":1707096601000,"contributors":[{"name":"過世秋風","email":"1040926235@qq.com","commits":1}]},"filePathRelative":"guide/interceptor/introduction.md"}');export{p as comp,h as data};
