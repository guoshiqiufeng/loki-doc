import{_ as e,o as t,c as n,d as s}from"./app-C7opU1tZ.js";const a={},i=s(`<h1 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h1><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li>Loki supports two ways of receiving messages: auto decoding, and non-auto decoding.</li><li>Ways to use it freely</li></ul><h2 id="listener-interface" tabindex="-1"><a class="header-anchor" href="#listener-interface"><span>Listener Interface</span></a></h2><blockquote><p>Listener needs to specify generics, auto decoding generics needs to have @MessageName annotation, non-auto decoding generics can use String.</p><p>Both methods need to implement the onMessage method to receive the message content.</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token keyword">implements</span> <span class="token class-name">Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageContent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="messagecontent" tabindex="-1"><a class="header-anchor" href="#messagecontent"><span>MessageContent</span></a></h2><table><thead><tr><th>参数名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>topic</td><td>String</td><td>topic</td></tr><tr><td>tag</td><td>String</td><td>tag</td></tr><tr><td>messageId</td><td>String</td><td>message id</td></tr><tr><td>messageGroup</td><td>String</td><td>message group</td></tr><tr><td>keys</td><td>Collection</td><td>message key</td></tr><tr><td>body</td><td>Generics</td><td>message body</td></tr><tr><td>bodyMessage</td><td>String</td><td>message body for String</td></tr></tbody></table>`,8),o=[i];function c(d,r){return t(),n("div",null,o)}const p=e(a,[["render",c],["__file","introduction.html.vue"]]),u=JSON.parse('{"path":"/en/guide/listener/introduction.html","title":"Instructions","lang":"en","frontmatter":{"lang":"en","title":"Instructions","description":null},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"Listener Interface","slug":"listener-interface","link":"#listener-interface","children":[]},{"level":2,"title":"MessageContent","slug":"messagecontent","link":"#messagecontent","children":[]}],"git":{"updatedTime":1707096601000,"contributors":[{"name":"過世秋風","email":"1040926235@qq.com","commits":1}]},"filePathRelative":"en/guide/listener/introduction.md"}');export{p as comp,u as data};
