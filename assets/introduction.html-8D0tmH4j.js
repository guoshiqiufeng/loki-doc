import{_ as t,o as n,c as s,d as e}from"./app-C7opU1tZ.js";const a={},i=e(`<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h1><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>loki接收消息支持两种方式：自动解码、非自动解码</li><li>都需要实现Listener 接口，可自由选择使用方式</li></ul><h2 id="listener-接口" tabindex="-1"><a class="header-anchor" href="#listener-接口"><span>Listener 接口</span></a></h2><blockquote><p>Listener需要指定泛型，自动解码泛型上需要存在@MessageName注解，非自动解码泛型使用String即可。</p><p>两种方式都需要实现onMessage方法，接收消息内容。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token keyword">implements</span> <span class="token class-name">Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageContent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="messagecontent" tabindex="-1"><a class="header-anchor" href="#messagecontent"><span>MessageContent</span></a></h2><table><thead><tr><th>参数名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>topic</td><td>String</td><td>主题</td></tr><tr><td>tag</td><td>String</td><td>标签</td></tr><tr><td>messageId</td><td>String</td><td>消息id</td></tr><tr><td>messageGroup</td><td>String</td><td>消息组</td></tr><tr><td>keys</td><td>Collection</td><td>消息key</td></tr><tr><td>body</td><td>泛型</td><td>内容</td></tr><tr><td>bodyMessage</td><td>String</td><td>内容String 格式</td></tr></tbody></table>`,8),l=[i];function d(o,c){return n(),s("div",null,l)}const p=t(a,[["render",d],["__file","introduction.html.vue"]]),u=JSON.parse('{"path":"/guide/listener/introduction.html","title":"介绍","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"介绍","description":null},"headers":[{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"Listener 接口","slug":"listener-接口","link":"#listener-接口","children":[]},{"level":2,"title":"MessageContent","slug":"messagecontent","link":"#messagecontent","children":[]}],"git":{"updatedTime":1707096601000,"contributors":[{"name":"過世秋風","email":"1040926235@qq.com","commits":1}]},"filePathRelative":"guide/listener/introduction.md"}');export{p as comp,u as data};
